choose(n,k) = factorial(n) / ( factorial(n - k) * factorial(k) )

binomial(k,n,p) = if k<=n then choose(n, k) * p^k * (1 - p)^(n - k) else 0

laplace(s,n) = (s + 1) / ( n + 2)

integrate(fun, min, max, epsilon) = {
  // assume that min and max are integers.
  l = max - min
  meanF(t) = mean(fun(t))
  intervals = map(upTo(0, (l/epsilon)), ({|n| min + n*epsilon}))
  values = map(intervals, ({ |x | meanF(x)}))
  result = reduce(values, 0, ({|acc, x| acc + x})) * epsilon
  result
}

powIndependentSamples(dist, exponent) = {
  n = floor(exponent)
  remainder = exponent - n
  helperList = upTo(1,n)
  dist_to_the_nth_power = reduce(helperList, 1, {|acc, _| acc * SampleSet.fromDist(dist) })
  dist_to_the_remainder = SampleSet.fromDist(dist)^remainder
  result = dist_to_the_nth_power * dist_to_the_remainder
  result
}

powDependentSamples(dist, exponent) = {
  distDependent = toSamplesSet(dist)
  n = floor(exponent)
  remainder = exponent - n
  helperList = upTo(1,n)
  dist_to_the_nth_power = reduce(helperList, 1, {|acc, _| acc * distDependent })
  dist_to_the_remainder = distDependent^remainder
  result = dist_to_the_nth_power * dist_to_the_remainder
  result
}

{
  choose: choose,
  binomial: binomial,
  laplace: laplace,
  integrate: integrate,
  powIndependentSamples: powIndependentSamples,
  powDependentSamples: powDependentSamples
}