utils = {
  choose(n,k) = factorial(n) / ( factorial(n - k) * factorial(k) )

  binomial(k,n,p) = if k<=n then choose(n, k) * p^k * (1 - p)^(n - k) else 0

  laplace(s,n) = (s + 1) / ( n + 2)

  integrate(fun, min, max, epsilon) = {
    // assume that min and max are integers.
    l = max - min
    meanF(t) = mean(fun(t))
    intervals = map(upTo(0, (l/epsilon)), ({|n| min + n*epsilon}))
    values = map(intervals, ({ |x | meanF(x)}))
    result = reduce(values, 0, ({|acc, x| acc + x})) * epsilon
    result
  }

  powIndependentSamples(dist, exponent) = {
    n = floor(exponent)
    remainder = exponent - n
    helperList = upTo(1,n)
    dist_to_the_nth_power = reduce(helperList, 1, {|acc, _| acc * SampleSet.fromDist(dist) })
    dist_to_the_remainder = SampleSet.fromDist(dist)^remainder
    result = dist_to_the_nth_power * dist_to_the_remainder
    result
  }

  powDependentSamples(dist, exponent) = {
    distDependent = toSamplesSet(dist)
    n = floor(exponent)
    remainder = exponent - n
    helperList = upTo(1,n)
    dist_to_the_nth_power = reduce(helperList, 1, {|acc, _| acc * distDependent })
    dist_to_the_remainder = distDependent^remainder
    result = dist_to_the_nth_power * dist_to_the_remainder
    result
  }

  {
    choose: choose,
    binomial: binomial,
    laplace: laplace,
    integrate: integrate,
    powIndependentSamples: powIndependentSamples,
    powDependentSamples: powDependentSamples
  }
}


// Current capital
forbes_moskovitz_fortune = 11.2B // https://www.forbes.com/profile/dustin-moskovitz/
moskovitz_fortune = 10B to 15B
forbes_sbf_fortune = 20.6B // https://www.forbes.com/profile/sam-bankman-fried/
sbf_fortune = 15B to 30B
other_fortunes = mx(5B to 10B, 5B to 30B)

capital_0 = moskovitz_fortune + sbf_fortune + other_fortunes
return_rate = -0.1 to 0.15
spending_percentage = 0.01 to 0.05
yearly_growth = return_rate - spending_percentage
// currently
// could be divided into different scenarios
// yearly_growth = mx(0.01 to 0.08, (-0.1 to 0.15), [0.7, 0.3])
growthByYear(t) = (1 + yearly_growth)^t // Independently sampled!
growthByYearWithoutSpending(t) = (1+return_rate)^t

currentCapitalWithGrowth(t) = capital_0 * growthByYear(t)
expectedCurrentCapitalWithGrowth(t) = mean(currentCapitalWithGrowth(t))

// New money coming from billionnaires

getNewBillionnaireMoney(t, chanceOfNewBillionnairePerYear) = {
  wholeNumberOfYears = floor(t)
  yearRemainder = t - floor(t)

  // Beginning of year
  realisticNumBillionnaires = 100 // 2668: forbes estimatec
  rangeNumBillionnaires = upTo(0, realisticNumBillionnaires)
  numNewBillionnairesObj  = map(rangeNumBillionnaires, {|n| {
      "x": n,
      "y":  utils.binomial(n,wholeNumberOfYears,chanceOfNewBillionnairePerYear)
  }})
  newBillionnairesDistFromBinomial = toDiscretePointSet(numNewBillionnairesObj)
  // fromXYShape: function does not yet exist

  // Remainder of year
  newBillionnaireInRemainderOfYearProb = 1 - (1 - chanceOfNewBillionnairePerYear)^(1/yearRemainder)
  newBillionnaireInRemainderOfYearDist = toDiscretePointSet([
    ({"x": 0, "y": 1 - newBillionnaireInRemainderOfYearProb }),
    ({"x": 1, "y": newBillionnaireInRemainderOfYearProb})
  ])

  // Sum both
  newBillionnairesDist = newBillionnairesDistFromBinomial + newBillionnaireInRemainderOfYearDist

  // How rich is each billionnaires
  newBillionareWealthDistribution = mx(1B to 10B, 1B to 100B, [0.7, 0.3]) * growthByYear(t)
  // Note that this models the converted billionnaires as switching spending from personal consumption
  // to altruistic spending, rather than not having spent anything before.

  // Combine numBillionnaires with billionareWealthDistribution to get final estimate
  newCapital = newBillionnairesDist * newBillionareWealthDistribution

  newCapital

}

// Scenarios over new billionnaires per year
pLoseItAll = 0 // 0.01; 0 for display purposes.
pNoNewBillionnairesEver = 0.2

chanceOfNewBillionnairePerYearOptimistic = utils.laplace(2, 2022 - 2007) // 2 billionnaires since GiveWell -> ~0.17 = 17%/year
chanceOfNewBillionnairesPerYearRealistic = utils.laplace(2, 2022 - 1972) // 2 billionnaires since Singer's Famine, Affluence and Morality -> ~0.05 = 5%/year
chanceOfNewBillionnairePerYear = 0.05 to 0.17 // SampleSet.fromDist(0.05 to 0.17) 
// overload the probability in the binomial! <- would be cool, but not doing right now.

newBillionnaireMoney(t) = getNewBillionnaireMoney(t, chanceOfNewBillionnairePerYearOptimistic)
probs = [pNoNewBillionnairesEver, 1 - pNoNewBillionnairesEver - pLoseItAll]
capital(t) = mx(currentCapitalWithGrowth(t), currentCapitalWithGrowth(t) + newBillionnaireMoney(t), probs)
expectedCapital(t) = mean(capital(t))

// Extra: Proportion of capital which is allocated to the most effective causes, full-stop.
hardcorePercentage = 0.05 to 0.5
hardcoreCapital(t) = hardcorePercentage * capital(t)

// Display
// expectedCapital
currentCapitalWithGrowth
// hardcoreCapital
