utils = {
  choose(n,k) = factorial(n) / ( factorial(n - k) * factorial(k) )

  binomial(k,n,p) = if k<=n then choose(n, k) * p^k * (1 - p)^(n - k) else 0

  laplace(s,n) = (s + 1) / ( n + 2)

  integrate(fun, min, max, epsilon) = {
    // assume that min and max are integers.
    l = max - min
    meanF(t) = mean(fun(t))
    intervals = map(upTo(0, (l/epsilon)), ({|n| min + n*epsilon}))
    values = map(intervals, ({ |x | meanF(x)}))
    result = reduce(values, 0, ({|acc, x| acc + x})) * epsilon
    result
  }

  powIndependentSamples(dist, exponent) = {
    n = floor(exponent)
    remainder = exponent - n
    helperList = upTo(1,n)
    dist_to_the_nth_power = reduce(helperList, 1, {|acc, _| acc * toSampleSet(dist) })
    dist_to_the_remainder = toSampleSet(dist)^remainder
    result = dist_to_the_nth_power * dist_to_the_remainder
    result
  }

  powDependentSamples(dist, exponent) = {
    distDependent = toSamplesSet(dist)
    n = floor(exponent)
    remainder = exponent - n
    helperList = upTo(1,n)
    dist_to_the_nth_power = reduce(helperList, 1, {|acc, _| acc * distDependent })
    dist_to_the_remainder = distDependent^remainder
    result = dist_to_the_nth_power * dist_to_the_remainder
    result
  }

  {
    choose: choose,
    binomial: binomial,
    laplace: laplace,
    integrate: integrate,
    powIndependentSamples: powIndependentSamples,
    powDependentSamples: powDependentSamples
  }
}
// The value of everything in a toy world.
// as a function

// Standard lib


// Variables
toyWorldVars = ({
  initialHumanPopulation: to(7.7B, 8.2B),
  humanPopulationGrowthPerYear:  to(-0.01, 0.05),
  yearlyEconomicGrowth: to(-0.05, 0.1),
  initialYearlyIncomeDistribution: to(200, 10k),
  yearlyProbabilityOfXrisk:to(0.001, 0.05),
  yearsAfterWhichToyWorldFreezes: 100,
  discountRateAfterToyWorldFreezes: 0.05
})

// Main
valueOfToyWorld(toyWorldVars) = { 
  // Initial variables
  initialHumanPopulation = toyWorldVars["initialHumanPopulation"]
  humanPopulationGrowthPerYear = toyWorldVars["humanPopulationGrowthPerYear"]
  yearlyEconomicGrowth = toyWorldVars["yearlyEconomicGrowth"]
  initialYearlyIncomeDistribution = toyWorldVars["initialYearlyIncomeDistribution"]
  yearlyProbabilityOfXrisk = toyWorldVars["yearlyProbabilityOfXrisk"]
  yearsAfterWhichToyWorldFreezes = toyWorldVars["yearsAfterWhichToyWorldFreezes"]
  discountRateAfterToyWorldFreezes = toyWorldVars["discountRateAfterToyWorldFreezes"]

  // Population
  humanPopulationGrowthByYear(t) = utils.powIndependentSamples(1 + humanPopulationGrowthPerYear, t)
  humanPopulation(t) = initialHumanPopulation * humanPopulationGrowthByYear(t)

  // EconomicGrowth 
  yearlyGrowthAsMultiplier = 1 + yearlyEconomicGrowth

  economicGrowthByYear(t) = utils.powIndependentSamples(yearlyGrowthAsMultiplier, t)
  // Value of that population

  epsilonConsumptionDist = 0.001
  truncatedConsumptionDist(t) = truncateLeft(initialYearlyIncomeDistribution*economicGrowthByYear(t), epsilonConsumptionDist)
  estimatedValueOfYear(t) = log(truncatedConsumptionDist(t))
  //
  
  // estimatedValueOfYear(10)
  valueAtYear(t) = estimatedValueOfYear(t) * humanPopulation(t)

  // Probability of x-risk
  yearlySurvivalProbability = truncateLeft(1 - yearlyProbabilityOfXrisk, 0)

  survivalProbabilitybyYear(t) = truncate(yearlySurvivalProbability^t, 0, 1)
  // survivalProbabilitybyYear(t) = truncateLeft(utils.powDependentSamples(yearlySurvivalProbability, t),0)

  existentialRiskByYear(t) = 1 - survivalProbabilitybyYear(t)

  valueAtYearIncludingXrisk(t) = valueAtYear(t) * survivalProbabilitybyYear(t)

  // Total value
  // Under the assumption that x-risk ends in 100 years either way,
  // and that we discount the remaining value at 5%/year (which is pretty brutal)
  freezeYear = yearsAfterWhichToyWorldFreezes

  totalValueInNextNYears = utils.integrate(valueAtYearIncludingXrisk, 0, freezeYear, 1)

  discountedValueAfterwards = valueAtYear(freezeYear) * survivalProbabilitybyYear(freezeYear) / discountRateAfterToyWorldFreezes
  expectedDiscountedValueAfterwards = mean(discountedValueAfterwards)

  totalValueInToyWorld = totalValueInNextNYears+ expectedDiscountedValueAfterwards

  result = {
    totalValueInToyWorld: totalValueInToyWorld,
    difference: totalValueInToyWorld - 19.3T,
    valueAtYearIncludingXrisk: valueAtYearIncludingXrisk,
    existentialRiskByYear: existentialRiskByYear,
    valueAtYear:  valueAtYear,
    humanPopulation: humanPopulation
  }
  result
  
} 

valueOfToyWorld(toyWorldVars)